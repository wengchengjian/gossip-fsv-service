buildscript {
    ext {
        springBootVersion = '3.0.0'
    }
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.bmuschko:gradle-docker-plugin:6.4.0')
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
//    id 'org.graalvm.buildtools.native' version '0.9.18'
    id 'idea'
    id 'checkstyle'

}

mainClassName = 'com.wcj.blog.starter.GossipBlogServiceApplication'

allprojects {

    ext {
        ports = [8080]
    }

    group = 'com.wcj.fsv'
    // jdk版本
    sourceCompatibility = 17
    targetCompatibility = 17

    // 指定编码格式
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'

    tasks.withType(JavaCompile) {
        options.encoding = "utf-8"
    }
    tasks.withType(Javadoc) {
        options.encoding = "utf-8"
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency 'log4j:log4j:1.2.17'
            dependency 'commons-io:commons-io:2.11.0'
            // https://mvnrepository.com/artifact/cn.hutool/hutool-all
            dependency 'cn.hutool:hutool-all:5.8.11'
            // https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2
            dependency 'com.alibaba.fastjson2:fastjson2:2.0.23'
            dependency 'jakarta.validation:jakarta.validation-api:3.0.2'
            dependency 'com.google.guava:guava:31.1-jre'
            // https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter
            dependency 'com.baomidou:mybatis-plus-boot-starter:3.5.3.1'
            dependency 'io.jsonwebtoken:jjwt:0.9.1'
            dependency 'p6spy:p6spy:3.9.1'
            dependency 'com.github.ben-manes.caffeine:caffeine:3.1.2'
            dependency 'junit:junit:4.13.2'
            dependency 'mysql:mysql-connector-java:8.0.32'
            dependency 'org.projectlombok:lombok:1.18.24'
            dependency 'io.minio:minio:8.5.4'
            dependency "com.amazonaws:aws-java-sdk-s3:1.12.270"

        }
    }

    jar.enabled = true
    /* 需要org.springframework.boot插件 不需要打包成可执行的jar*/
    bootJar.enabled = false

    /**
     * 公共依赖
     */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation 'log4j:log4j'
        implementation 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        implementation 'com.google.guava:guava'
        implementation 'commons-io:commons-io'
        implementation 'com.alibaba.fastjson2:fastjson2'
        implementation 'cn.hutool:hutool-all'
        implementation 'io.jsonwebtoken:jjwt'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

